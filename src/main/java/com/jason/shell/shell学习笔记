##!/usr/bin/env bash
#!/bin/bash
echo "Hi,Jason"

var=chenchen#赋值操作
i=1
#var = chenchen#相等操作
#可以使用$加变量名打印变量值
echo $var  #方式一
echo ${var} #方式二

echo $i $var


echo $PATH


##标准变量和环境变量
##获取字符串的长度 length=${#var}
str=chenchen123
echo "str length:${#str}"
##识别当前所使用的shell  $SHELL也可以用$0
echo $SHELL  $0
##检查是否为超级用户 UID是一个重要的环境变量，UID=0表明是root
##  eq 就是 EQUAL等于
##  ne就是 NOT EQUAL不等于
##  gt 就是 GREATER THAN大于　
##  lt 就是 LESS THAN小于
##  ge 就是 GREATER THAN OR EQUAL 大于等于
##  le 就是 LESS THAN OR EQUAL 小于等于
##方式一
if test $UID != 0; then
    echo "This is root"
else
    echo "this ordinary root"
fi
##方式二
if [ $UID -ne 0 ]; then
    echo "$UID != 0"
else
    echo "other"
fi
##使用系统函数  prepend()
# prepend /opt/myapp/bin:$PATH /opt/myapp/bin
##利用let、（（））、[]、expr、bc函数
##当使用let时，变量名之前不需要再添加$
a=1
b=2
let result=a+b
echo $result
##自加操作
let a++
##自减操作
let b--


#操作符[]的使用方法和let命令类似:
             result=$[ a + b ]
#在[]中也可以使用$前缀，例如:
#result=$[ $no1 + 5 ] 也可以使用(())，但使用(())时，变量名之前需要加上$:

  result=$(( a + 50 ))
#expr同样可以用于基本算术操作: result=`expr 3 + 4`
result=$(expr $a + 5)
#以上这些方法只能用于整数运算，而不支持浮点数。

#bc是一个用于数学运算的高级工具可以借助它来执行浮点数运算并应用一些高级函数
echo "4*0.56"|bc
c=54;
s=`echo "$c*1.5"|bc`
echo $s
#设定小树精度  scale
echo "scale=2;3/8" | bc #0.37
echo "scale=2;3/8"      #scale=2;3/8
#精制转换 obase
no=100
echo "obase=2;$no" | bc
#计算平方已经平方根
echo "sqrt(100)" | bc
echo "10^10" | bc

##文件描述符及重定向
#文件描述符   0  stdin(标准输入)， 1 stdout(标准输出)、2 stderr(标准错误)

#将输出文本重定向或保存到一个文件中
echo "this is a sample text 1" > temp.txt
#将文本追加到目标文件中
echo "this is sample text 2" >> temp.txt

ls ccccc 2>out.txt ##意思是将ls ccccc 产生的错误日志重定向到out.txt文件中

##有一个方法既可以将数据重定向到文件还可以提供一份重定向数据的副本作为后续命令的stdin tee命令
##command | tee file ,tee命令会将文件覆盖，但是它提供了一个-a选项，用于追加内容

cat temp.txt | tee test.txt
cat temp.txt | tee -a test.txt

for i in "jason"; do
  echo $i
done

st=jason
#可以将readonly修饰st,将st变成一个只读的变量

##可以使用unset命令删除变量,删除之后不能使用
unset st

##变量类型分为三种：局部变量、环境变量、shell变量

##提取子字符串
string="this is a dog"
echo ${string:1:4} #输出his
##查找子字符串，查找字符 i
echo `expr index "$string" is` ##输出 有问题需要该//TODO

##shell数组
#数组名=（值...）
strarray=(1 2 3)
#或
strarray[0]=1
strarray[1]=2
strarray[2]=3

##读取数组 ${数组名[下标]},可以使用@符获取数组中的所有元素
${strarray[0]}

# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}


##############################################
#1、## 表示从左边开始删除。一个 # 表示从左边删除到第一个指定的字符；两个 # 表示从左边删除到最后一个指定的字符。

#2、%% 表示从右边开始删除。一个 % 表示从右边删除到第一个指定的字符；两个 % 表示从左边删除到最后一个指定的字符。

删除包括了指定的字符本身
var=http://www.aaa.com/123.htm

#1. # 号截取，删除左边字符，保留右边字符。

echo ${var#*//}
#其中 var 是变量名，# 号是运算符，*// 表示从左边开始删除第一个 // 号及左边的所有字符

#即删除 http://

#结果是 ：www.aaa.com/123.htm

#2. ## 号截取，删除左边字符，保留右边字符。

echo ${var##*/}
##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符

#即删除 http://www.aaa.com/

#结果是 123.htm

#3. %号截取，删除右边字符，保留左边字符

echo ${var%/*}
#%/* 表示从右边开始，删除第一个 / 号及右边的字符

#结果是：http://www.aaa.com

#4. %% 号截取，删除右边字符，保留左边字符

echo ${var%%/*}
#%%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符

#结果是：http:

#5. 从左边第几个字符开始，及字符的个数

echo ${var:0:5}
#其中的 0 表示左边第一个字符开始，5 表示字符的总个数。

#结果是：http:

#6. 从左边第几个字符开始，一直到结束。

echo ${var:7}
#其中的 7 表示左边第8个字符开始，一直到结束。

#结果是 ：www.aaa.com/123.htm

#7. 从右边第几个字符开始，及字符的个数

echo ${var:0-7:3}
#其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数。

#结果是：123

#8. 从右边第几个字符开始，一直到结束。

echo ${var:0-7}
#表示从右边第七个字符开始，一直到结束。

#结果是：123.htm

#注：（左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）

#########################################################
#    在编写shell时，向脚本传递参数，脚本里获取参数的格式为：$n 其中n是整数，从1开始，其中$0表示当前执行文件的文件名

参数处理	说明
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。
如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。

$* 与 $@ 区别：

相同点：都是引用所有参数。
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。

注意：中括号 [] 与其中间的代码应该有空格隔开

expr 是一款表达式计算工具，使用它能完成表达式的求值操作。


echo:
 # -e 开启转义 \c 不换行

read:
   read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量

test函数：
参数     	说明
=	        等于则为真
!=	        不相等则为真
-z 字符串	字符串的长度为零则为真
-n 字符串	字符串的长度不为零则为真
-e 文件名	如果文件存在则为真
-r 文件名	如果文件存在且可读则为真
-w 文件名	如果文件存在且可写则为真
-x 文件名	如果文件存在且可执行则为真
-s 文件名	如果文件存在且至少有一个字符则为真
-d 文件名	如果文件存在且为目录则为真
-f 文件名	如果文件存在且为普通文件则为真
-c 文件名	如果文件存在且为字符型特殊文件则为真
-b 文件名	如果文件存在且为块特殊文件则为真

if test -e a.txt
then
   echo "a.txt 存在"

另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高，"-a"次之，"-o"最低。例如：

cd /bin
if test -e ./notFile -o -e ./bash
then
    echo '至少有一个文件存在!'
else
    echo '两个文件都不存在'
fi
##while
while condition
do
    command
done

Shell 函数
linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。

shell中函数的定义格式如下：

[ function ] funname [()]

{

    action;

    [return int;]

}
说明：

1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255


Shell 输入/输出重定向
大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。

重定向命令列表如下：

命令	              说明
command > file	将输出重定向到 file。
command < file	将输入重定向到 file。
command >> file	将输出以追加的方式重定向到 file。
n > file	    将文件描述符为 n 的文件重定向到 file。
n >> file	    将文件描述符为 n 的文件以追加的方式重定向到 file。
n >& m	        将输出文件 m 和 n 合并。
n <& m	        将输入文件 m 和 n 合并。
<< tag	        将开始标记 tag 和结束标记 tag 之间的内容作为输入。

/dev/null 文件
如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：


