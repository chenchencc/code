/**
 * 1.装饰模式的适用场景：

 （1）需要扩展一个类的功能、或者给一个类添加附加的职责时。

 （2）需要动态的给一个对象添加功能，这些功能可以再动态的撤销时。

 （3）需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变得不现实。

 （4）当不能采用生成子类的方式进行扩充时。

 2.装饰模式的优点：

 （1）装饰模式与继承关系的目的都是要扩展对象的功能，但装饰模式可以提供比继承关系更大的灵活性。

 （2）通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。

 3.装饰模式的缺点：

 （1）装饰模式比继承关系更加灵活，但意味着更加复杂。

 （2）装饰模式会导致设计中出现很多小类，如果过度使用会使程序变得很复杂。

 4.装饰模式与适配器模式的区别：

 （1）关于新职责

 适配器模式也可以再转换时增加新的功能，但主要目的是为了完成接口的兼容。装饰模式最主要的职责是给装饰类增加新的职责。

 （2）关于原接口

 适配器模式是用新接口来调用原接口，原接口对新系统来说是不可见或者不可用的。装饰模式原封不动的调用原接口，系统对装饰的对象也是通过原接口来完成使用。

 （3）关于装饰的对象

 适配器是知道被适配者的详细情况的，而装饰者只知道其接口是什么，至于什么具体类型只有在运行期间才知道。
 */
package com.jason.designmodle.装饰器模式;