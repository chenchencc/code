方法上的注解

  @ OnMethod  用来指定trace的目标类和方法以及具体位置, 被注解的方法在匹配的方法执行到指定的位置会被调用。"clazz"属性用来指定目标类名, 可以指定全限定类名, 比如"java.awt.Component", 也可以是正则表达式(表达式必须写在"//"中, 比如"/java\\.awt\\..+/")。"method"属性用来指定被trace的方法. 表达式可以参考自带的例子(NewComponent.java 和 Classload.java, 关于方法的注解可以参考MultiClass.java). 有时候被trace的类和方法可能也使用了注解. 用法参考自带例子WebServiceTracker.java. 针对注解也是可以使用正则表达式, 比如像这个"@/com\\.acme\\..+/ "，也可以通过指定超类来匹配多个类, 比如"+java.lang.Runnable"可以匹配所有实现了java.lang.Runnable接口的类. 具体参考自带例子SubtypeTracer.java。

  @OnTimer定时触发Trace，时间可以指定，单位为毫秒，具体参考自带例子 Histogram.java。

  @OnError 当trace代码抛异常或者错误时，该注解的方法会被执行. 如果同一个trace脚本中其他方法抛异常, 该注解方法也会被执行。

  @OnExit 当trace方法调用内置exit(int)方法(用来结束整个trace程序)时, 该注解的方法会被执行. 参考自带例子ProbeExit.java。

  @OnEvent 用来截获"外部"btrace client触发的事件, 比如按Ctrl-C 中断btrace执行时，并且选择2，或者输入事件名称，将执行使用了该注解的方法, 该注解的value值为具体事件名称。具体参考例子HistoOnEvent.java

  @OnLowMemory 当内存超过某个设定值将触发该注解的方法, 具体参考MemAlerter.java

  @OnProbe 使用外部文件XML来定义trace方法以及具体的位置，具体参考示例SocketTracker1.java和java.net.socket.xml。

参数上的注解

  @Self 用来指定被trace方法的this，可参考例子AWTEventTracer.java 和 AllCalls1.java

  @Return 用来指定被trace方法的返回值，可参考例子Classload.java

  @ProbeClassName (since 1.1) 用来指定被trace的类名, 可参考例子AllMethods.java

  @ProbeMethodName (since 1.1) 用来指定被trace的方法名, 可参考例子WebServiceTracker.java。

  @TargetInstance (since 1.1) 用来指定被trace方法内部被调用到的实例, 可参考例子AllCalls2.java

  @TargetMethodOrField (since 1.1) 用来指定被trace方法内部被调用的方法名, 可参考例子AllCalls1.java 和 AllCalls2.java。

 非注解的方法参数

未使用注解的方法参数一般都是用来做方法签名匹配用的, 他们一般和被trace方法中参数出现的顺序一致. 不过他们也可以与注解方法交错使用, 如果一个参数类型声明为*AnyType[]*, 则表明它按顺序"通吃"方法所有参数. 未注解方法需要与*Location*结合使用:

   Kind.ENTRY-被trace方法参数

   Kind.RETURN- 被trace方法返回值

   Kind.THROW - 抛异常

   Kind.ARRAY_SET, Kind.ARRAY_GET - 数组索引

   Kind.CATCH - 捕获异常

   Kind.FIELD_SET - 属性值

   Kind.LINE - 行号

   Kind.NEW - 类名

   Kind.ERROR - 抛异常



属性上的注解

   @Export 该注解的静态属性主要用来与jvmstat计数器做关联. 使用该注解之后, btrace程序就可以向jvmstat客户端(可以用来统计jvm堆中的内存使用量)暴露trace程序的执行次数, 具体可参考例子ThreadCounter.java

   @Property 使用了该注解的trace脚本将作为MBean的一个属性, 一旦使用该注解, trace脚本就会创建一个MBean并向MBean服务器注册, 这样JMX客户端比如VisualVM, jconsole就可以看到这些BTrace MBean. 如果这些被注解的属性与被trace程序的属性关联, 那么就可以通过VisualVM 和jconsole来查看这些属性了. 具体可参考例子ThreadCounterBean.java 和 HistogramBean.java。

   @TLS 用来将一个脚本变量与一个ThreadLocal变量关联. 因为ThreadLocal变量是跟线程相关的, 一般用来检查在同一个线程调用中是否执行到了被trace的方法. 具体可参考例子OnThrow.java 和 WebServiceTracker.java

类上的注解

   @com.sun.btrace.annotations.DTrace 用来指定btrace脚本与内置在其脚本中的D语言脚本关联, 具体参考例子DTraceInline.java.

   @com.sun.btrace.annotations.DTraceRef 用来指定btrace脚本与另一个D语言脚本文件关联. 具体参考例子DTraceRefDemo.java.

   @com.sun.btrace.annotations.BTrace 用来指定该java类为一个btrace脚本文件.

BTrace Samples

相关实例说明

BTrace自带的sample是学习BTrace的最后资料，熟练使用BTrace中提供的sample并且能够手动进行验证，可以快速的熟悉BTrace并加载应用，自带的sample也有很大一部分可以直接或者稍加修改就可以成为我们的定位脚本，方便使用。

   AWTEventTracer.java - 演示了对EventQueue.dispatchEvent()事件进行trace的做法, 可以通过instanceof来对事件进行过滤, 比如这里只针对focus事件trace.

   AllLines.java - 演示了如何在被trace的程序到达probe指定的类和指定的行号时执行指定的操作(例子中指定的行号是-1表示任意行).

   AllSync.java - 演示了如何在进入/退出同步块进行trace.

   ArgArray.java - 演示了打印java.io包下所有类的readXXX方法的输入参数.

   Classload.java - 演示打印成功加载指定类以及堆栈信息.

   CommandArg.java - 演示如何获取btrace命令行参数.

   Deadlock.java - 演示了@OnTimer注解和内置deadlock()方法的用法

   DTraceInline.java - 演示@DTrace注解的用法

   DTraceDemoRef.java - 演示@DTraceRef 注解的用法.

   FileTracker.java - 演示了如何对File{Input/Output}Stream构造函数中初始化打开文件的读写文件操作进行trace.

   FinalizeTracker.java - 演示了如何打印一个类所有的属性, 这个在调试和故障分析中非常有用. 这里的例子是打印FileInputStream类的close() /finalize() 方法被调用时的信息.

   Histogram.java - 演示了统计javax.swing.JComponent在一个应用中被创建了多少次.

   HistogramBean.java - 同上例, 只不过演示了如何与JMX集成, 这里的map属性通过使用@Property注解被暴露成一个MBean.

   HistoOnEvent.java - 同上例, 只不过演示了如何在通过按ctrl+c中断当前脚本时打印出创建次数, 而不是定时打印.

   JdbcQueries.java - 演示了聚合(aggregation)功能. 关于聚合功能可参考DTrace.

   JInfo.java - 演示了内置方法printVmArguments(), printProperties() 和printEnv() 的用法

   JMap.java - 演示了内置方法dumpHeap()的用法. 即将目标应用的堆信息以二进制的形式dump出来

   JStack.java - 演示了内置方法jstackAll()的用法, 即打印所有线程的堆栈信息.

   LogTracer.java - 演示了如何深入实例方法(Logger.log)并调用内置方法(field() )打印私有属性内容.

   MemAlerter.java - 演示了使用@OnLowMememory 注解监控内存使用情况. 即堆内存中的年老代达到指定值时打印出内存信息.

   Memory.java - 演示每隔4s打印一次内存统计信息.

   MultiClass.java - 演示了通过使用正则表达式对多个类的多个方法进行trace.

   NewComponent.java - 使用计数器每隔一段时间检查当前应用中创建java.awt.Component的个数.

   OnThrow.java - 当抛出异常时, 打印出异常堆栈信息.

   ProbeExit.java - 演示@OnExit注解和内置exit(int)方法的用法

   Profiling.java - 演示了对profile的支持.  // 我执行没成功, BTrace内部有异常

   Sizeof.java - 演示了内置的sizeof方法的使用.

   SocketTracker.java - 演示了对socket的creation/bind方法的trace.

   SocketTracker1.java - 同上, 只不过使用了@OnProbe.

   SysProp.java - 演示了使用内置方法获取系统属性, 这里是对 java.lang.System的getProperty方法进行trace.

   SubtypeTracer.java - 演示了如何对指定超类的所有子类的指定方法进行trace.

   ThreadCounter.java - 演示了在脚本中如何使用jvmstat 计数器. (jstat -J-Djstat.showUnsupported=true -name btrace.com.sun.btrace.samples.ThreadCounter.count 需要这样来从外部通过jstat来访问)

   ThreadCounterBean.java - 同上, 只不过使用了JMX.

   ThreadBean.java - 演示了对预编译器的使用(并结合了JMX).

   ThreadStart.java - 演示了脚本中DTrace的用法.

   Timers.java - 演示了在一个脚本中同时使用多个@OnTimer

   URLTracker.java - 演示了在每次URL.openConnection成功返回时打印出url. 这里也使用了D语言脚本.

   WebServiceTracker.java - 演示了如何根据注解进行trace.



比如我想匹配所有的Filter类，在接口或基类的名称前面，加个+ 就行
@OnMethod(clazz="+com.vip.demo.Filter", method="doFilter")

也可以按类或方法上的annotaiton匹配，前面加上@就行
@OnMethod(clazz="@javax.jws.WebService", method="@javax.jws.WebMethod")


3. 拦截时机
可以为同一个函数的不同的Location，分别定义多个拦截函数。

3.1 Kind.Entry与Kind.Return
@OnMethod( clazz="java.net.ServerSocket", method="bind" )
不写Location，默认就是刚进入函数的时候(Kind.ENTRY)。

但如果你想获得函数的返回结果或执行时间，则必须把切入点定在返回(Kind.RETURN)时。

OnMethod(clazz = "java.net.ServerSocket", method = "getLocalPort", location = @Location(Kind.RETURN))

public static void onGetPort(@Return int port, @Duration long duration)

duration的单位是纳秒，要除以 1,000,000 才是毫秒。


3.2 Kind.Error, Kind.Throw和 Kind.Catch
异常抛出(Throw)，异常被捕获(Catch)，异常没被捕获被抛出函数之外(Error)，主要用于对某些异常情况的跟踪。

在拦截函数的参数定义里注入一个Throwable的参数，代表异常。

@OnMethod(clazz = "java.net.ServerSocket", method = "bind", location = @Location(Kind.ERROR))

public static void onBind(Throwable exception, @Duration long duration)





3.3 Kind.Call与Kind.Line
下例定义监控bind()函数里调用的所有其他函数：

@OnMethod(clazz = "java.net.ServerSocket", method = "bind", location = @Location(value = Kind.CALL, clazz = "/.*/", method = "/.*/", where = Where.AFTER))

public static void onBind(@Self Object self, @TargetInstance Object instance, @TargetMethodOrField String method, @Duration long duration)

        所调用的类及方法名所注入到@TargetInstance与 @TargetMethodOrField中。

        ​静态函数中，instance的值为空。如果想获得执行时间，必须把Where定义成AFTER。
        如果想获得执行时间，必须 把Where定义成AFTER。

        注意这里，一定不要像下面这样大范围的匹配，否则这性能是神仙也没法救了：

@OnMethod(clazz = "/javax\\.swing\\..*/", method = "/.*/", location = @Location(value = Kind.CALL, clazz = "/.*/", method = "/.*/"))

下例监控代码是否到达了Socket类的第363行。

@OnMethod(clazz = "java.net.ServerSocket", location = @Location(value = Kind.LINE, line = 363))

public static void onBind4() {

        println("socket bind reach line:363");

        }

        line还可以为-1，然后每行都会打印出来，加参数int line 获得的当前行数。此时会显示函数里完整的执行路径，但肯定又非常慢。

